// Generated by CoffeeScript 1.8.0
(function() {
  var address, app, bodyParser, card, city, classify, config, cookieParser, coupon, customer, district, domain, ent, express, favicon, feedback, index, invoice, log4js, logger, marketing, member, mongoose, news, notice, order, path, payLog, price, product, province, report, server, spec, uri;

  express = require("express");

  path = require("path");

  favicon = require("static-favicon");

  cookieParser = require("cookie-parser");

  bodyParser = require("body-parser");

  mongoose = require("mongoose");

  config = require("./config/config.json");

  uri = "mongodb://" + config.db.host + ":" + config.db.port + "/" + config.db.database;

  global.db = mongoose.createConnection(uri);

  log4js = require("log4js");

  log4js.configure({
    appenders: [
      {
        type: "console"
      }
    ],
    replaceConsole: true
  });

  logger = log4js.getLogger("normal");

  member = require("./routes/member");

  ent = require("./routes/ent");

  product = require("./routes/product");

  price = require("./routes/price");

  order = require("./routes/order");

  customer = require("./routes/customer");

  province = require("./routes/province");

  city = require("./routes/city");

  district = require("./routes/district");

  domain = require("./routes/domain");

  feedback = require("./routes/feedback");

  classify = require("./routes/classify");

  report = require("./routes/report");

  card = require("./routes/card");

  address = require("./routes/deliveryAddress");

  invoice = require("./routes/invoice");

  payLog = require("./routes/payLog");

  coupon = require("./routes/coupon");

  marketing = require("./routes/marketing");

  news = require("./routes/news");

  spec = require("./routes/spec");

  notice = require("./routes/notice");

  index = require("./routes/index");

  app = express();

  app.set("views", path.join(__dirname, "views"));

  app.set("view engine", "ejs");

  app.use(favicon());

  app.use(bodyParser.json());

  app.use(bodyParser.urlencoded());

  app.use(cookieParser());

  app.use(express["static"](path.join(__dirname, "public")));

  app.use(log4js.connectLogger(logger, {
    level: log4js.levels.INFO
  }));

  app.use(function(req, res, next) {
    res.set("X-Powered-By", "Server");
    return next();
  });

  app.use("/", index);

  app.use("/api/member", member);

  app.use("/api/ent", ent);

  app.use("/api/product", product);

  app.use("/api/price", price);

  app.use("/api/order", order);

  app.use("/api/customer", customer);

  app.use("/api/province", province);

  app.use("/api/city", city);

  app.use("/api/district", district);

  app.use("/api/domain", domain);

  app.use("/api/feedback", feedback);

  app.use("/api/classify", classify);

  app.use("/api/report", report);

  app.use("/api/card", card);

  app.use("/api/address", address);

  app.use("/api/invoice", invoice);

  app.use("/api/payLog", payLog);

  app.use("/api/coupon", coupon);

  app.use("/api/marketing", marketing);

  app.use("/api/news", news);

  app.use("/api/product/spec", spec);

  app.use("/api/notice", notice);

  app.use(function(req, res, next) {
    return res.status(404).end();
  });

  if ((app.get("env")) === "development") {
    app.use(function(err, req, res, next) {
      console.log(err);
      return res.status(err.status || 500).end();
    });
  }

  app.use(function(err, req, res, next) {
    console.log(err);
    return res.status(err.status || 500).end();
  });

  app.set("port", process.env.PORT || 3456);

  server = app.listen(app.get("port"), function() {
    return console.log("Express server listening on port " + (server.address().port));
  });

  module.exports = app;

  Date.prototype.Format = function(fmt) {
    var getWeek, key, o, value;
    getWeek = function(w) {
      var x;
      switch (w) {
        case 0:
          return x = "周日";
        case 1:
          return x = "周一";
        case 2:
          return x = "周二";
        case 3:
          return x = "周三";
        case 4:
          return x = "周四";
        case 5:
          return x = "周五";
        case 6:
          return x = "周六";
      }
    };
    o = {
      "M+": this.getMonth() + 1,
      "d+": this.getDate(),
      "h+": this.getHours(),
      "m+": this.getMinutes(),
      "s+": this.getSeconds(),
      "q+": Math.floor((this.getMonth() + 3) / 3),
      "S": this.getMilliseconds(),
      "W": getWeek(this.getDay())
    };
    if (/(y+)/.test(fmt)) {
      fmt = fmt.replace(RegExp.$1, ("" + (this.getFullYear())).substr(4 - RegExp.$1.length));
    }
    for (key in o) {
      value = o[key];
      if (new RegExp("(" + key + ")").test(fmt)) {
        fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1 ? value : ("00" + value).substr(("" + value).length)));
      }
    }
    return fmt;
  };

}).call(this);
